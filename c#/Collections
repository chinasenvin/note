数组:
    特点
        数组只能放数据类型完全一致的数据
        数组定长,长度确定之后不可以再修改(缺点)
        数组存取速度非常快

四个集合都是类，封装了一些操作，使用起来更方便

public class SE {
    public string Id { get; set; }
    publi string Name { get; set; }
    public int Age { get; set; }
    public Gender Sex { get; set;}
    public string Assess { get; set; }
    public int Score { get; set; }
    public int Popular { get; set; }
    
    public string Show(){
        return "大家好我的名字叫:”+this.Name+"工号”+this.Id+"我的人气值高达:”+this.Popular;
    } 
}

public class SE {
    public string Id { get; set; }
    publi string Name { get; set; }
    public int Age { get; set; }
    public Gender Sex { get; set;}
    public string WorkExper { get; set; }
    public int WorkYear { get; set; }
    
    public string Show(){
        return "大家好我的名字叫:”+this.Name+"工号”+this.Id+"我的工作年限:”+this.WorkYear;
    } 
}

1.  动态集合(ArrayList)
    特点:
        长度可以自动进行变化,长度随着存取数据自动调整
        动态存放的是任意类型的数据
    操作: 
	    声明 新增 删除 取 查找 遍历
	
	    声明:
		    ArrayList list=new ArrayList();
		新增:
		    list.add(objectobj);//自动装箱操作-->object
		取数据:
            list[下标] //强制转换 拆箱-->对应的类型
        删除:   
        list.RemoveAt(下标); //根据下标删除
            list.Remove(对象);   //根据对象删除
            删除后下标重新由0开始排序
                list.clear();        //清除所有的
        查找
            list.contains(对象); //返回是否包含某个指定的对象
        遍历:
                for (inti = 0; i < list.Count; i++)
                {
                    if (list[i] is SE)
                    Console.WriteLine(((SE)list[i]).Show();
                    if (list[i] is PM)
                    Console.WriteLine(((PM)list[i]).Show(O);
                    }

                foreach (var item in list)
                {
                    if(item is SE)
                        Console.WriteLine(((SE)item).Show());
                    if (item is PM)
                        Console.WriteLine((PM)item).Show());
                    }

                foreach (var item in list)
                {
                    if(item is SE)
                        Console.WriteLine( (item as SE).Show();
                    if (item is PM)
                        Console.WriteLine(((PM)item).Show();
                }
            
            is语法:
                A is B 判断A是否是属于B这种数据类型 返回true false
            as语法: //作为
                A as B 把A强转成B 等价于 (B)A
                A as B 转换失败 返回null
                (B)A   转换失败 抛一个异常
				
2.  哈希表(HashTable)
    特点:
        两排结构 键值对结构构成一个key(键) 对应一个value(值)
        键值对一一对应
    操作:
        声明:
            HashTable hash = new HashTable();
        赋值:
            hash.Add(key, value);
            注意: key不能重复(抛异常) 装箱操作
        取数据:
            hash[key]  进行拆箱操作
        删除数据
            hash.Remove (key);
            hash.Clear();
        查找
            hash.ContainsKey(键查找)
            hash.containsvalue(值查找)	
        遍历
            只遍历键
                foreach (var item in hash.Keys){}
                foreach (var item in hash.Keys)
				{
                    Console.Writeline(item);
				}
            只遍历值
                foreach (var item in hash.Values){}
                foreach (var item in hash.Values)
				{
                    if (item is PM)
                        Console.WriteLine ((item as PM).Show();
                    if (item is SE)
                        Console.WriteLine((item as SE).Show(O);
                }
            遍历值+键
                foreach (DictionaryEntry item in hash)
                {
                    item.Key 键
                    item.Value值
                }
                foreach (DictionaryEntry item in hash)
                {
                    Console.Writeline(item.Key);
                    Console.Writeline( (item.Value_as _SE).Show());
                }
				
ArrayList: 动态数组 装箱拆箱 类似数组单排结构
HashTable: 动态可变 装箱拆箱 键值对两排结构

限制数据类型 泛型集合

3.  List<T>
    泛型:Ttype类型定义List类没有指明r类型在声明的时候确定T类型
    特点:限制了数据类型的ArrayList
    操作:
        声明
            List<类型> 集合名称 = newList<类型> ();
        赋值
            list.Add(); //匹配对应的数据类型
        取值
            list[下标]; //无需类型转换
        删除
            list.RemoveAt(下标)
            list.Remove(对象)
            list.clear()
        包含
            list.contains(对象)
        遍历
            foreach(类型 item in list)
            {
                item//直接使用
            }
            foreach (SE item in seList)
            {
                Console.Writeline(item.Show());
            }

4.  字典集合(Dictionary)
    特点:
        限制了数据类型的HashTable
        key-value键值对类型相同 两排结构 操作通过key完成
        限制了装的数据类型
    操作:
        声明:
            Dictionary<K类型,V类型> dic = new Dictionary<K类型,V类型>();
        赋值:
            dic.Add(k,v); //不会装箱类型限制
        取数据:
            dic[key]; //通过key来取 不需要类型转换
        删除:
            dic.Remove (key)
            dic .clear()
        判断
            ContainsKey    //键查找
            ContainsValue  //值查找
        遍历
            只遍历键:
                foreach(类型item in dic.Keys){}
                foreach (int item in dic.Keys)
                {
                    Console Writeline(item);
                }
            只遍历值:
                foreach(类型item in dic.Values){}
                foreach (SE item in dic.Values)
                {
                    Console.WriteLine(item.Show());
                }
                
            一个键一个值:
                foreach (KeyValuePair<类型,类型>item in dic)
                {
                    item.Key
                    item.Value
				}
                foreach (KeyValuePair item in dic)
                {
                    Console.WritelLine(item.Key);
                    Console.Writeline(item.Value.Shoy());
                }    
