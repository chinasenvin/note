面向对象编程(OOP):
    三大操作:封装(package)继承(inherit)多态(polymorphic)
    1.封装(写类):
        把操作步骤封装到一个方法中
        在字段中加入get和set方法封装成数据
        把字段/属性/方法封装得到一个类
    2.继承:
        定义:在设计类的过程中我们发现众多类具有相同的属性和方法，
        从这些类中抽取出相同的属性和方法形成一个父类,再让子类去
        继承这个父类从而得到这些相同的属性或方法.
        
        作用:减少代码的冗余提升代码的复用率
        
        语法:
            class A : B
            {
            }
            B:父类 基类 超类
            A:子类 派生类
            说法:A继承了B或者B派生了A

        访问控制符  控制属性或方法被调用的位置
                    本类中     子类中     当前项目    项目外
        private     是           否           否       香
        protected   是           是           否       否
        internal    是           是           是       否
        public      是           是           是       是


        构造函数问题:
            A:在new子类时默认会先去执行父类的无参构造函数，再根据参数情况调用子类自己的构造

            B:base关键字:
                this:当前类这个类
                base:父类
            public SE(参数1,参数2,参数3): base(参数1,参数2)
            {
                //首先强制调用父类的带参构造传入1和2进行初始化
                //再初始化参数3
            }
            

LSP:里氏替换原则
    子类必须完全实现父类的特性才允许被继承，那么子类就可以替换父类出现的位置
    
    应用:
        在设计方法的参数/返回值的时候,集合的类型设计成父类类型，传递数据/赋值用子类类型，可以正确运行
        父类引用指向子类实例
            父类声明 new 子类
            父类 对象 = new 子类();
                例如：狗 阿三 = new 金毛();
                
    示例：
                枪类（爆头()）
                   |
            |------|---------|---------|
        手枪类    狙击枪    AK47类   水枪类
        
        玩家类
        射击(手枪类 handgun) -->  射击(枪类 gun)
        
            Player zhangSan = new PlayerO { UserName ="张三”};
            HandGun gun = new HandGun("手枪”);
            zhangSan. Shoot(gun);
            AK47 gun2 = new AK47("AK47");
            zhangSan. Shoot (gun2);
            GujiGun gun3 = new GujiGun("狙击枪”);
            zhangSan. Shoot(gun3);
        -->
            Gun gun= new HandGun("手枪”);
            zhangSan. Shoot(gun);
            gun = new AK47("AK47");
            zhangSan. Shoot(gun);
                


